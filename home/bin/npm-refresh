#!/usr/bin/env node

const child_process = require("child_process");
const fs = require("fs");

function spawn(command = "", args = []) {
  return new Promise((resolve, reject) => {
    const proc = child_process.spawn(command, args, {
      stdio: "inherit"
    });

    proc.on("data", data => process.stdout.write(data));
    proc.on("error", reject);
    proc.on("exit", code => (code ? reject(code) : resolve()));
  });
}

function getPackageNames(dependencies = {}) {
  const names = [];

  for (const [name, url] of Object.entries(dependencies)) {
    if (url.includes("://")) {
      names.push(url);
    } else {
      names.push(name);
    }
  }

  return names;
}

async function main() {
  const packageJson = JSON.parse("" + fs.readFileSync("package.json"));
  const dependencies = getPackageNames(packageJson.dependencies);
  const devDependencies = getPackageNames(packageJson.devDependencies);

  delete packageJson.dependencies;

  fs.writeFileSync("package.json", JSON.stringify(packageJson));
  
  if (dependencies.length > 0) {
    await spawn("npm", ["install", "-S", ...dependencies]);
  }
  
  if (devDependencies.length > 0) {
    await spawn("npm", ["install", "-D", ...devDependencies]);
  }

  await spawn("npm", ["audit", "fix"]);
  return 0;
}

main();
